Author: Alphard
Origin: http://sourceforge.net/tracker/index.php?func=detail&aid=1611621&group_id=63889&atid=505531
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=456501
--- a/src/gtk/system.cpp
+++ b/src/gtk/system.cpp
@@ -58,12 +58,31 @@
 
 // Sound stuff
 //
-const  int         iSoundSamples  = 2048;
-const  int         iSoundTotalLen = iSoundSamples * 4;
-static u8          auiSoundBuffer[iSoundTotalLen];
-static int         iSoundLen;
-static SDL_cond *  pstSoundCond;
-static SDL_mutex * pstSoundMutex;
+const  int        sdlSoundSamples  = 2048;
+const  int        sdlSoundAlign    = 4;
+const  int        sdlSoundCapacity = sdlSoundSamples * 4;
+const  int        sdlSoundTotalLen = sdlSoundCapacity + sdlSoundAlign;
+static u8         sdlSoundBuffer[sdlSoundTotalLen];
+static int        sdlSoundRPos;
+static int        sdlSoundWPos;
+static SDL_cond  *sdlSoundCond;
+static SDL_mutex *sdlSoundMutex;
+
+static inline int soundBufferFree()
+{
+  int ret = sdlSoundRPos - sdlSoundWPos - sdlSoundAlign;
+  if (ret < 0)
+    ret += sdlSoundTotalLen;
+  return ret;
+}
+
+static inline int soundBufferUsed()
+{
+  int ret = sdlSoundWPos - sdlSoundRPos;
+  if (ret < 0)
+    ret += sdlSoundTotalLen;
+  return ret;
+}
 
 inline VBA::Window * GUI()
 {
@@ -130,79 +149,69 @@
     SDL_PauseAudio(0);
   }
 
-  bool bWait = true;
-  while (bWait && ! speedup && GUI()->iGetThrottle() == 0)
-  {
-    SDL_mutexP(pstSoundMutex);
-    if (iSoundLen < iSoundTotalLen)
-    {
-      bWait = false;
+  int       remain = soundBufferLen;
+  const u8 *wave   = reinterpret_cast<const u8 *>(soundFinalWave);
+  if (remain <= 0)
+    return;
+  SDL_mutexP(sdlSoundMutex);
+  int n;
+  while (remain >= (n = soundBufferFree())) {
+    const int nAvail = ((sdlSoundTotalLen - sdlSoundWPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+    if (n >= nAvail) {
+      memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, nAvail);
+      sdlSoundWPos  = 0;
+      wave       += nAvail;
+      remain     -= nAvail;
+      n          -= nAvail;
     }
-    SDL_mutexV(pstSoundMutex);
-  }
-
-  int iLen = soundBufferLen;
-  int iCopied = 0;
-  if (iSoundLen + iLen >= iSoundTotalLen)
-  {
-    iCopied = iSoundTotalLen - iSoundLen;
-    memcpy(&auiSoundBuffer[iSoundLen], soundFinalWave, iCopied);
-
-    iSoundLen = iSoundTotalLen;
-    SDL_CondSignal(pstSoundCond);
-
-    bWait = true;
-    if (! speedup && GUI()->iGetThrottle() == 0)
-    {
-      while(bWait)
-      {
-        SDL_mutexP(pstSoundMutex);
-        if (iSoundLen < iSoundTotalLen)
-        {
-          bWait = false;
-        }
-        SDL_mutexV(pstSoundMutex);
-      }
-
-      memcpy(auiSoundBuffer, ((u8 *)soundFinalWave) + iCopied,
-             soundBufferLen - iCopied);
-
-      iSoundLen = soundBufferLen - iCopied;
+    if (n > 0) {
+      memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, n);
+      sdlSoundWPos = (sdlSoundWPos + n) % sdlSoundTotalLen;
+      wave   += n;
+      remain -= n;
     }
-    else
-    {
-      memcpy(auiSoundBuffer, ((u8 *)soundFinalWave) + iCopied,
-             soundBufferLen);
+    if (!emulating || speedup || GUI()->iGetThrottle() != 0) {
+      SDL_mutexV(sdlSoundMutex);
+      return;
     }
+    SDL_CondWait(sdlSoundCond, sdlSoundMutex);
   }
-  else
-  {
-    memcpy(&auiSoundBuffer[iSoundLen], soundFinalWave, soundBufferLen);
-    iSoundLen += soundBufferLen;
+  const int nAvail = ((sdlSoundTotalLen - sdlSoundWPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+  if (remain >= nAvail) {
+    memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, nAvail);
+    sdlSoundWPos = 0;
+    wave   += nAvail;
+    remain -= nAvail;
+  }
+  if (remain > 0) {
+    memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, remain);
+    sdlSoundWPos = (sdlSoundWPos + remain) % sdlSoundTotalLen;
   }
+  SDL_mutexV(sdlSoundMutex);
 }
 
-static void vSoundCallback(void * _pvUserData, u8 * _puiStream, int _iLen)
+static void soundCallback(void *, u8 *stream, int len)
 {
-  if (! emulating)
-  {
+  if (len <= 0 || !emulating)
     return;
+  SDL_mutexP(sdlSoundMutex);
+  const int nAvail = soundBufferUsed();
+  if (len > nAvail)
+    len = nAvail;
+  const int nAvail2 = ((sdlSoundTotalLen - sdlSoundRPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+  if (len >= nAvail2) {
+    memcpy(stream, &sdlSoundBuffer[sdlSoundRPos], nAvail2);
+    sdlSoundRPos = 0;
+    stream += nAvail2;
+    len    -= nAvail2;
+  }
+  if (len > 0) {
+    memcpy(stream, &sdlSoundBuffer[sdlSoundRPos], len);
+    sdlSoundRPos = (sdlSoundRPos + len) % sdlSoundTotalLen;
+    stream += len;
   }
-
-  SDL_mutexP(pstSoundMutex);
-  if (! speedup && GUI()->iGetThrottle() == 0)
-  {
-    while (iSoundLen < iSoundTotalLen && emulating)
-    {
-      SDL_CondWait(pstSoundCond, pstSoundMutex);
-    }
-  }
-  if (emulating)
-  {
-    memcpy(_puiStream, auiSoundBuffer, _iLen);
-  }
-  iSoundLen = 0;
-  SDL_mutexV(pstSoundMutex);
+  SDL_CondSignal(sdlSoundCond);
+  SDL_mutexV(sdlSoundMutex);
 }
 
 bool systemSoundInit()
@@ -227,8 +236,8 @@
 
   stAudio.format   = AUDIO_S16SYS;
   stAudio.channels = 2;
-  stAudio.samples  = iSoundSamples;
-  stAudio.callback = vSoundCallback;
+  stAudio.samples  = sdlSoundSamples;
+  stAudio.callback = soundCallback;
   stAudio.userdata = NULL;
 
   if (SDL_OpenAudio(&stAudio, NULL) < 0)
@@ -237,11 +246,11 @@
     return false;
   }
 
-  pstSoundCond  = SDL_CreateCond();
-  pstSoundMutex = SDL_CreateMutex();
+  sdlSoundCond  = SDL_CreateCond();
+  sdlSoundMutex = SDL_CreateMutex();
 
   soundBufferTotalLen = soundBufferLen * 10;
-  iSoundLen = 0;
+  sdlSoundRPos = sdlSoundWPos = 0;
   systemSoundOn = true;
 
   return true;
@@ -249,17 +258,17 @@
 
 void systemSoundShutdown()
 {
-  SDL_mutexP(pstSoundMutex);
+  SDL_mutexP(sdlSoundMutex);
   int iSave = emulating;
   emulating = 0;
-  SDL_CondSignal(pstSoundCond);
-  SDL_mutexV(pstSoundMutex);
+  SDL_CondSignal(sdlSoundCond);
+  SDL_mutexV(sdlSoundMutex);
 
-  SDL_DestroyCond(pstSoundCond);
-  pstSoundCond = NULL;
+  SDL_DestroyCond(sdlSoundCond);
+  sdlSoundCond = NULL;
 
-  SDL_DestroyMutex(pstSoundMutex);
-  pstSoundMutex = NULL;
+  SDL_DestroyMutex(sdlSoundMutex);
+  sdlSoundMutex = NULL;
 
   SDL_CloseAudio();
 
--- a/src/sdl/SDL.cpp
+++ b/src/sdl/SDL.cpp
@@ -255,12 +255,31 @@
 char screenMessageBuffer[21];
 u32  screenMessageTime = 0;
 
-// Patch #1382692 by deathpudding.
-SDL_sem *sdlBufferLock  = NULL;
-SDL_sem *sdlBufferFull  = NULL;
-SDL_sem *sdlBufferEmpty = NULL;
-u8 sdlBuffer[4096];
-int sdlSoundLen = 0;
+const  int        sdlSoundSamples  = 2048;
+const  int        sdlSoundAlign    = 4;
+const  int        sdlSoundCapacity = sdlSoundSamples * 2;
+const  int        sdlSoundTotalLen = sdlSoundCapacity + sdlSoundAlign;
+static u8         sdlSoundBuffer[sdlSoundTotalLen];
+static int        sdlSoundRPos;
+static int        sdlSoundWPos;
+static SDL_cond  *sdlSoundCond;
+static SDL_mutex *sdlSoundMutex;
+
+static inline int soundBufferFree()
+{
+  int ret = sdlSoundRPos - sdlSoundWPos - sdlSoundAlign;
+  if (ret < 0)
+    ret += sdlSoundTotalLen;
+  return ret;
+}
+
+static inline int soundBufferUsed()
+{
+  int ret = sdlSoundWPos - sdlSoundRPos;
+  if (ret < 0)
+    ret += sdlSoundTotalLen;
+  return ret;
+}
 
 char *arg0;
 
@@ -2945,72 +2964,76 @@
   systemScreenMessage("Screen capture");
 }
 
-void soundCallback(void *,u8 *stream,int len)
+static void soundCallback(void *, u8 *stream, int len)
 {
-  if (!emulating)
+  if (len <= 0 || !emulating)
     return;
-
-  // Patch #1382692 by deathpudding.
-  /* since this is running in a different thread, speedup and
-   * throttle can change at any time; save the value so locks
-   * stay in sync */
-  bool lock = (!speedup && !throttle) ? true : false;
-
-  if (lock)
-    SDL_SemWait (sdlBufferFull);
-
-  SDL_SemWait (sdlBufferLock);
-  memcpy (stream, sdlBuffer, len);
-  sdlSoundLen = 0;
-  SDL_SemPost (sdlBufferLock);
-
-  if (lock)
-    SDL_SemPost (sdlBufferEmpty);
+  SDL_mutexP(sdlSoundMutex);
+  const int nAvail = soundBufferUsed();
+  if (len > nAvail)
+    len = nAvail;
+  const int nAvail2 = ((sdlSoundTotalLen - sdlSoundRPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+  if (len >= nAvail2) {
+    memcpy(stream, &sdlSoundBuffer[sdlSoundRPos], nAvail2);
+    sdlSoundRPos = 0;
+    stream += nAvail2;
+    len    -= nAvail2;
+  }
+  if (len > 0) {
+    memcpy(stream, &sdlSoundBuffer[sdlSoundRPos], len);
+    sdlSoundRPos = (sdlSoundRPos + len) % sdlSoundTotalLen;
+    stream += len;
+  }
+  SDL_CondSignal(sdlSoundCond);
+  SDL_mutexV(sdlSoundMutex);
 }
 
 void systemWriteDataToSoundBuffer()
 {
-  // Patch #1382692 by deathpudding.
-  if (SDL_GetAudioStatus () != SDL_AUDIO_PLAYING)
-    SDL_PauseAudio (0);
-
-  if ((sdlSoundLen + soundBufferLen) >= 2048*2) {
-    bool lock = (!speedup && !throttle) ? true : false;
-
-    if (lock)
-      SDL_SemWait (sdlBufferEmpty);
-
-    SDL_SemWait (sdlBufferLock);
-    int copied = 2048*2 - sdlSoundLen;
-    memcpy (sdlBuffer + sdlSoundLen, soundFinalWave, copied);
-    sdlSoundLen = 2048*2;
-    SDL_SemPost (sdlBufferLock);
-
-    if (lock) {
-      SDL_SemPost (sdlBufferFull);
-
-      /* wait for buffer to be dumped by soundCallback() */
-      SDL_SemWait (sdlBufferEmpty);
-      SDL_SemPost (sdlBufferEmpty);
-
-      SDL_SemWait (sdlBufferLock);
-      memcpy (sdlBuffer, ((u8 *)soundFinalWave) + copied,
-          soundBufferLen - copied);
-      sdlSoundLen = soundBufferLen - copied;
-      SDL_SemPost (sdlBufferLock);
-    }
-    else {
-      SDL_SemWait (sdlBufferLock);
-      memcpy (sdlBuffer, ((u8 *) soundFinalWave) + copied, soundBufferLen);
-      SDL_SemPost (sdlBufferLock);
-    }
-  }
-  else {
-    SDL_SemWait (sdlBufferLock);
-    memcpy (sdlBuffer + sdlSoundLen, soundFinalWave, soundBufferLen);
-     sdlSoundLen += soundBufferLen;
-    SDL_SemPost (sdlBufferLock);
+  if (SDL_GetAudioStatus() != SDL_AUDIO_PLAYING)
+  {
+    SDL_PauseAudio(0);
   }
+
+  int       remain = soundBufferLen;
+  const u8 *wave   = reinterpret_cast<const u8 *>(soundFinalWave);
+  if (remain <= 0)
+    return;
+  SDL_mutexP(sdlSoundMutex);
+  int n;
+  while (remain >= (n = soundBufferFree())) {
+    const int nAvail = ((sdlSoundTotalLen - sdlSoundWPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+    if (n >= nAvail) {
+      memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, nAvail);
+      sdlSoundWPos  = 0;
+      wave       += nAvail;
+      remain     -= nAvail;
+      n          -= nAvail;
+    }
+    if (n > 0) {
+      memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, n);
+      sdlSoundWPos = (sdlSoundWPos + n) % sdlSoundTotalLen;
+      wave   += n;
+      remain -= n;
+    }
+    if (!emulating || speedup || throttle) {
+      SDL_mutexV(sdlSoundMutex);
+      return;
+    }
+    SDL_CondWait(sdlSoundCond, sdlSoundMutex);
+  }
+  const int nAvail = ((sdlSoundTotalLen - sdlSoundWPos) + sdlSoundTotalLen) % sdlSoundTotalLen;
+  if (remain >= nAvail) {
+    memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, nAvail);
+    sdlSoundWPos = 0;
+    wave   += nAvail;
+    remain -= nAvail;
+  }
+  if (remain > 0) {
+    memcpy(&sdlSoundBuffer[sdlSoundWPos], wave, remain);
+    sdlSoundWPos = (sdlSoundWPos + remain) % sdlSoundTotalLen;
+  }
+  SDL_mutexV(sdlSoundMutex);
 }
 
 bool systemSoundInit()
@@ -3040,26 +3063,35 @@
     fprintf(stderr,"Failed to open audio: %s\n", SDL_GetError());
     return false;
   }
-  soundBufferTotalLen = soundBufferLen*10;
-  // Patch #1382692 by deathpudding.
-  sdlBufferLock  = SDL_CreateSemaphore (1);
-  sdlBufferFull  = SDL_CreateSemaphore (0);
-  sdlBufferEmpty = SDL_CreateSemaphore (1);
-  sdlSoundLen = 0;
+
+  sdlSoundCond  = SDL_CreateCond();
+  sdlSoundMutex = SDL_CreateMutex();
+
+  soundBufferTotalLen = soundBufferLen * 10;
+  sdlSoundRPos = sdlSoundWPos = 0;
   systemSoundOn = true;
+
   return true;
 }
 
 void systemSoundShutdown()
 {
-  // Patch #1382692 by deathpudding.
-  SDL_CloseAudio (); //TODO: fix freeze
-  SDL_DestroySemaphore (sdlBufferLock);
-  SDL_DestroySemaphore (sdlBufferFull);
-  SDL_DestroySemaphore (sdlBufferEmpty);
-  sdlBufferLock  = NULL;
-  sdlBufferFull  = NULL;
-  sdlBufferEmpty = NULL;
+  SDL_mutexP(sdlSoundMutex);
+  int iSave = emulating;
+  emulating = 0;
+  SDL_CondSignal(sdlSoundCond);
+  SDL_mutexV(sdlSoundMutex);
+
+  SDL_DestroyCond(sdlSoundCond);
+  sdlSoundCond = NULL;
+
+  SDL_DestroyMutex(sdlSoundMutex);
+  sdlSoundMutex = NULL;
+
+  SDL_CloseAudio();
+
+  emulating = iSave;
+  systemSoundOn = false;
 }
 
 void systemSoundPause()
